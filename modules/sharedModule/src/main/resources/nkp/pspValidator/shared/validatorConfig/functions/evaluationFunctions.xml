<evaluationFunctions>
    <description>
        Zde jsou zdokumentovány definované funkce, které jsou využívány k vyhodnocování proměnných.
        Tento soubor je jen informativní a neměl by být měněn ani doplňován. Samotné funkce včetně jmen, typů
        a počtů parametrů, návratové hodnoty a zejména samotné implementace jsou definovány v kódu validátoru.

        Návratové typy a typy parametrů-hodnot
        --------------------------------------
        Element evaluationFunction musí vždy přes atribut resultType definovat typ návratové hodnoty. Každý
        parametr-hodnota musí
        v atributu type elementu value definovat očekávanou hodnotu.

        Typy parametrů
        ------------------
        Element value označuje očekávaný parametr-hodnotu. Povolený počet výskytu hodnot je určen pomocí atributů
        minOccurs a maxOccurs.
        Při volání lze použít buď odkaz na pojmenovanou hodnotu (value-ref), přímý zápis hodnoty (jen pro
        vybrané typy), nebo zápis vyhodnocení (anonymní definice pomocí evaluation).

        Element pattern označuje očekávaný parametr-vzor. Při volání je nutné poskytnout práve jednu hodnotu vzoru
        daného jména.

        Počet výskotů parametrů-hodnot
        ------------------------------
        Parametry typu hodnota (param-value) se mohou v rámci volání opakovat, pokud je to u konkrétního parametru
        umožněno přes hodnoty atributů minOccurs a maxOccurs. Ty fungují podobně, jako u XSD. Pokud není uveden jeden
        nebo oba atributy, platí defaultní hodnoty minOccurs=1 a maxOccurs=1, tedy hodnota se musí vyskytnout práve
        jednou. Příklady:

        minOccurs=1, maxOccurs=1 - povolen právě jeden výskyt parametru. Toto jsou defaultní hodnoty
        minOccurs=0, maxOccurs=1 - žádný nebo jeden výskyt
        minOccurs=0, maxOccurs=unbound - žádný nebo několik výskytů
        minOccurs=1, maxOccurs=unbound - jeden nebo několik výskytů
        minOccurs=3, maxOccurs=5 - tři, čtyři, nebo pět výskytů

        Opakování znamená více výskytů parametrů stejného jména.
    </description>


    <evaluationFunction name="getProvidedString" resultType="STRING">
        <description>Hodnota proměnné typue STRING bude poskytnuta volajícím programem.</description>
        <params-def>
            <value name="string_id" type="STRING"/>
        </params-def>
    </evaluationFunction>

    <evaluationFunction name="getProvidedFile" resultType="FILE">
        <description>Hodnota proměnné typue FILE bude poskytnuta volajícím programem.</description>
        <params-def>
            <value name="file_id" type="STRING"/>
        </params-def>
    </evaluationFunction>

    <evaluationFunction name="getProvidedInteger" resultType="INTEGER">
        <description>Hodnota proměnné typue INTEGER bude poskytnuta volajícím programem.</description>
        <params>
            <value name="int_id" type="STRING"/>
        </params>
    </evaluationFunction>

    <!--<evaluationFunction name="getPspIdFromInfoFile" resultType="STRING">
        <description>Vrátí hodnotu PSP-ID z obsahu souboru INFO.</description>
        <params>
            <value name="info_file" type="FILE"/>
        </params>
    </evaluationFunction>-->

    <evaluationFunction name="findFilesInDirByPattern" resultType="FILE_LIST">
        <description>Vrátí seznam souborů v adresáři, které odpovídají vzoru. Pokud nelze adresář vyhodnotit (null), vyhodí buď chybu, nebo vrátí prázdný seznam
            a to podle hodnoty nepovinného parametru errorIfDirNull, defaultní hodnota je true.
        </description>
        <params-def>
            <value name="dir" type="FILE"/>
            <value name="errorIfDirNull" type="BOOLEAN" minOccurs="0" maxOccurs="1"/>
            <pattern name="pattern"/>
        </params-def>
    </evaluationFunction>


    <evaluationFunction name="getFirstFileFromFileList" resultType="FILE">
        <description>Vrátí první položku ze seznamu. Pokud je seznam prázdný, vyhodí výjimku, případně vrátí null (jen, pokud je returnNullIfEmpty true)
        </description>
        <params-def>
            <value name="files" type="FILE_LIST"/>
            <value name="returnNullIfEmpty" type="BOOLEAN" minOccurs="0"/>
        </params-def>
    </evaluationFunction>

    <!--data from xml by xpath-->

    <evaluationFunction name="getStringByXpath" resultType="STRING">
        <description>Vrátí textový řetězec z xml souboru podle xpath.</description>
        <params>
            <value name="xml_file" type="FILE"/>
            <value name="xpath" type="STRING"/>
            <value name="nsAware" type="BOOLEAN" minOccurs="0"/>
        </params>
    </evaluationFunction>

    <evaluationFunction name="getFileListByXpath" resultType="FILE_LIST">
        <description>Vrátí textový řetězec z xml souboru podle xpath.</description>
        <params>
            <value name="psp_dir" type="FILE"/>
            <value name="xml_file" type="FILE"/>
            <value name="xpath" type="STRING"/>
            <value name="nsAware" type="BOOLEAN" minOccurs="0"/>
        </params>
    </evaluationFunction>

    <evaluationFunction name="getStringListByXpath" resultType="FILE_LIST">
        <description>Vrátí textový řetězec z xml souboru podle xpath.</description>
        <params>
            <value name="xml_file" type="FILE"/>
            <value name="xpath" type="STRING"/>
            <value name="nsAware" type="BOOLEAN" minOccurs="0"/>
        </params>
    </evaluationFunction>

    <!--TODO: implement-->
    <evaluationFunction name="GET_INT_BY_XPATH" resultType="INTEGER">
        <description>Vrátí číslo z xml souboru podle xpath.</description>
        <params-def>
            <value name="file" type="FILE"/>
            <value name="xpath" type="STRING"/>
            <value name="nsAware" type="BOOLEAN" minOccurs="0"/>
        </params-def>
    </evaluationFunction>

    <evaluationFunction name="buildListOfStrings" resultType="STRING_LIST">
        <description>Z více paramatrů typu STRING vytvoří seznam.</description>
        <params-def>
            <value name="string" type="STRING" minOccurs="0" maxOccurs="unbound"/>
        </params-def>
    </evaluationFunction>

    <evaluationFunction name="mergeIdentifiers" resultType="STRING_LIST">
        <description>Spojí identifikátory do jednoho seznamu. Vstupem jsou jednotlivé identifikátory, seznamy
            identifikátorů a nebo seznamy seznamů identifikátorů.
        </description>
        <params-def>
            <value name="identifier" type="IDENTIFIER" minOccurs="0" maxOccurs="unbound"/>
            <value name="identifier_list" type="IDENTIFIER_LIST" minOccurs="0" maxOccurs="unbound"/>
            <value name="identifier_list_list" type="IDENTIFIER_LIST_LIST" minOccurs="0" maxOccurs="unbound"/>
        </params-def>
    </evaluationFunction>


    <evaluationFunction name="getDcIdentifiersForEachDmdsecId" resultType="IDENTIFIER_LIST_LIST">
        <description>Vrátí seznam seznamů identifikátorů z Dublin Core - pro každý dmdSec jeden seznam.</description>
        <params-def>
            <value name="dmdsec_ids" type="STRING_LIST"/>
            <value name="mets_file" type="FILE"/>
        </params-def>
    </evaluationFunction>


    <!--<params>
        <value name="dmdsec_ids" type="STRING_LIST">
            &lt;!&ndash;seznam identifikatoru (dmdSec ID)&ndash;&gt;
            <evaluation functionName="getStringListByXpath">
                <params>
                    <value name="xml_file" type="FILE">
                        <value-ref name="PRIMARY-METS_FILE"/>
                    </value>
                    <value name="xpath" type="STRING">
                        /mets:mets/mets:dmdSec[starts-with(@ID, "DCMD")]/@ID
                    </value>
                </params>
            </evaluation>
        </value>
        <value name="primary-mets_file" type="FILE">
            <value-ref name="PRIMARY-METS_FILE"/>
        </value>
    </params>-->


    <!--TODO: pridat do dokumentace v hlavicce-->
    <evaluationFunction name="GET_FILES_BLABLA" resultType="FILE_LIST">
        <!--Navratove hodnoty mouzu byt jen String, File, Integer, List<String>, List<File>, List<Integer>-->

        <params-def>
            <value name="name" type="STRING"/>
            <value name="xpath" type="STRING"/>
            <value name="count" type="INTEGER"/>
            <value name="file" type="FILE"/>
            <value name="dir" type="FILE"/>
            <value name="dir_list" type="FILE_LIST"/>
            <value name="name_list" type="STRING_LIST"/>
            <pattern name="name_pattern"/>
        </params-def>
    </evaluationFunction>


</evaluationFunctions>