<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           targetNamespace="http://www.nkp.cz/pspValidator/2.3/binaryFileProfile"
           xmlns:bfp="http://www.nkp.cz/pspValidator/2.3/binaryFileProfile"
           xmlns:xs="http://www.w3.org/2001/XMLSchema">

    <xs:element name="binaryFileProfile">
        <xs:complexType>
            <xs:choice minOccurs="0">
                <xs:element name="fromXml" type="bfp:fromXmlType"/>
                <xs:element name="fromText" type="bfp:fromTextType"/>
            </xs:choice>
            <xs:attribute name="validatorVersion" type="xs:string" use="required"/>
            <xs:attribute name="dmf" type="xs:string" use="required"/>
        </xs:complexType>
    </xs:element>

    <xs:complexType name="fromTextType">
        <xs:sequence>
            <xs:element name="validation" type="bfp:validationType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="fromXmlType">
        <xs:sequence>
            <xs:element name="namespaces" type="bfp:namespacesType" minOccurs="0"/>
            <xs:element name="validation" type="bfp:validationType" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="namespacesType">
        <xs:sequence>
            <xs:element name="namespace" type="bfp:namespaceType" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="namespaceType">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="prefix" type="xs:string" use="required"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:complexType name="validationType">
        <xs:sequence>
            <xs:choice minOccurs="0">
                <xs:element name="xmlDataExtraction" type="bfp:xmlDataExtractionType"/>
                <xs:element name="textDataExtraction" type="bfp:textDataExtractionType"/>
            </xs:choice>
            <xs:element name="rules" type="bfp:rulesType"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="optional"/>
    </xs:complexType>

    <xs:complexType name="textDataExtractionType">
        <xs:choice>
            <xs:element name="firstNonempty" type="bfp:firstNonemptyType"/>
            <xs:element name="allNonempty" type="bfp:allNonemptyType"/>
        </xs:choice>
        <xs:attribute name="resultType" type="bfp:extractionResultTypeType" use="required"/>
    </xs:complexType>

    <xs:complexType name="xmlDataExtractionType">
        <xs:choice>
            <xs:element name="firstNonempty" type="bfp:firstNonemptyType"/>
            <xs:element name="allNonempty" type="bfp:allNonemptyType"/>
        </xs:choice>
        <xs:attribute name="resultType" type="bfp:extractionResultTypeType" use="required"/>
    </xs:complexType>

    <xs:simpleType name="extractionResultTypeType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="STRING"/>
            <xs:enumeration value="STRING_LIST"/>
            <xs:enumeration value="INTEGER"/>
            <xs:enumeration value="FLOAT"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="firstNonemptyType">
        <xs:sequence>
            <xs:element name="xpath" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
            <xs:element name="regexp" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="allNonemptyType">
        <xs:sequence>
            <xs:element name="xpath" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
            <xs:element name="regexp" type="xs:string" maxOccurs="unbounded" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="rulesType" mixed="true">
        <xs:sequence>
            <xs:element name="mustExist" type="bfp:emptyElementType" minOccurs="0"/>
            <xs:element name="mustNotExist" type="bfp:emptyElementType" minOccurs="0"/>
            <xs:element name="mustMatchAny" type="bfp:mustMatchAnyType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="mustMatchAnyType">
        <xs:sequence>
            <xs:element name="isExactly" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="endsWith" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="isInIntRange" type="bfp:intRangeType" minOccurs="0"/>
            <xs:element name="isInFloatRange" type="bfp:floatRangeType" minOccurs="0"/>
            <xs:element name="nTimesXRemainingY" type="bfp:nTimesXRemainingYType" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="intRangeType">
        <xs:sequence>
            <xs:element name="min" type="xs:int" minOccurs="0"/>
            <xs:element name="max" type="xs:int" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="floatRangeType">
        <xs:sequence>
            <xs:element name="min" type="xs:float" minOccurs="0"/>
            <xs:element name="max" type="xs:float" minOccurs="0"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="nTimesXRemainingYType">
        <xs:sequence>
            <xs:element name="n" type="xs:int"/>
            <xs:element name="x" type="xs:int"/>
            <xs:element name="y" type="xs:int"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="emptyElementType"/>

</xs:schema>