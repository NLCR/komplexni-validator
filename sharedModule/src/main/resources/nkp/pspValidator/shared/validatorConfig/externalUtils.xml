<!--
    This file defines available external utils.
    Available variables are:
    ${UTIL_PATH} - in version detection and execution will be replaced by whole path to given util, if the path is set, and with empty string otherwise
    ${TARGET_FILE} - in execution will be replaced by target file, with absolute path
-->
<externalUtils>
    <util name="JPYLYZER">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}jpylyzer --version</command>
                <parser>
                    <stream>STDERR</stream>
                    <!--      <regexp>(?s).*</regexp>-->
                    <regexp>\A[0-9\.]+$</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}jpylyzer.exe --version</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>\A[0-9\.]+$</regexp>
                </parser>
            </operatingSystem>

            <!--jpylyzer 1.17-->
            <!--zdrojove kody z https://github.com/openpreserve/jpylyzer/releases a spousteni pres python-->
            <!--http://jpylyzer.openpreservation.org//installation.html-->
            <operatingSystem name="MAC">
                <command>python ${UTIL_PATH}jpylyzer.py --version</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>\A[0-9\.]+$</regexp>
                </parser>
            </operatingSystem>

            <!--jpylyzer 2.0 (not yet supported)-->
            <!--<operatingSystem name="MAC">
                <command>jpylyzer &#45;&#45;version</command>
                <command>jpylyzer &#45;&#45;version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>-->
        </versionDetection>
        <execution name="jp2k">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}jpylyzer jp2In ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}jpylyzer.exe jp2In ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>

            <!--jpylyzer 1.17-->
            <operatingSystem name="MAC">
                <command>python ${UTIL_PATH}jpylyzer.py jp2In ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>

            <!--jpylyzer 2.0 (not yet supported)-->
            <!--<operatingSystem name="MAC">
                <command>jpylyzer jp2In ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>-->
        </execution>
    </util>

    <util name="IMAGE_MAGICK">
        <versionDetection>
            <!--https://gist.github.com/Lammerink/3926636-->
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}convert -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <!--<regexp>ImageMagick\s\S*\s\S*</regexp>-->
                    <regexp>ImageMagick [0-9\.\-]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}magick.exe convert -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <!--<regexp>ImageMagick\s\S*\s\S*</regexp>-->
                    <regexp>ImageMagick [0-9\.\-]+</regexp>
                </parser>
            </operatingSystem>
            <!--http://www.imagemagick.org/script/binary-releases.php-->
            <!--instalace pres MacPorts-->
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}convert -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>ImageMagick\s\S*\s\S*</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="jp2k">
            <!--NOTE: if the file is empty, ideentify -verbose doesn't print anything at all-->
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}identify -verbose ${TARGET_FILE}</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}magick.exe identify -verbose ${TARGET_FILE}</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}identify -verbose ${TARGET_FILE}</command>
                <parser>
                    <!--at least in version 6.9.9 the error message finally goes to STDERR-->
                    <stream>STDERR</stream>
                    <!--<stream>STDOUT</stream>-->
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>

    <util name="JHOVE">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}jhove --version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <!--<regexp>Jhove \(.*\)</regexp>-->
                    <regexp>Rel\. [0-9\.]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <!--TODO: v aplikaci vyzadovat minimalni verzi 1.14
                http://openpreservation.org/news/jhove-1-14-released/
                instalace: stahnout jhove-latest.jar (instalator) a spustit double click nebo java -jar jhove-latest.jar
                -->
                <command>${UTIL_PATH}jhove.bat --version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>Rel\. [0-9\.]+</regexp>
                    <!--<regexp>Jhove \(.*\)</regexp>-->
                    <!--<regexp>(?m)^.*$</regexp>-->
                </parser>
            </operatingSystem>
            <!--instalace podle http://jhove.openpreservation.org/getting-started/-->
            <!--stahnout jhove-latest.jar a double click spusti instalator (predpoklad jre)-->
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}jhove --version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>Jhove \(.*\)</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="jp2k">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}jhove -h XML -m jpeg2000-hul -k ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}jhove.bat -h XML -m jpeg2000-hul -k ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}jhove -h XML -m jpeg2000-hul -k ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
        </execution>
        <execution name="wav">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}jhove -h XML -m WAVE-hul ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}jhove.bat -h XML -m WAVE-hul ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}jhove -h XML -m WAVE-hul ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s)&lt;\?xml.*$</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>

    <util name="KAKADU">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}kdu_expand -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <!--<regexp>Current core system version is \S*</regexp>-->
                    <regexp>v[\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}kdu_expand.exe -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <!--<regexp>Current core system version is \S*</regexp>-->
                    <regexp>v[\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <!--demo app does not work in macOS 10.12 Sierra, so not tested-->
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}kdu_expand -version</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>Current core system version is \S*</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="jp2k">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}kdu_expand -i ${TARGET_FILE}</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}kdu_expand.exe -i ${TARGET_FILE}</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <!--demo app does not work in macOS 10.12 Sierra, so not tested-->
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}kdu_expand -i ${TARGET_FILE}</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>

    <util name="MP3VAL">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}mp3val -v</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>MP3val [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}mp3val -v</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>MP3val [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}mp3val -v</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>MP3val [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="mp3">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}mp3val ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}mp3val ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}mp3val ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>

    <util name="SHNTOOL">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}shntool -v</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>shntool [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}shntool.exe -v</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>shntool [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}shntool -v</command>
                <parser>
                    <stream>STDERR</stream>
                    <regexp>shntool [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="wav">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}shntool info ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}shntool.exe info ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}shntool info ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>

    <util name="CHECKMATE">
        <versionDetection>
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}mpck -V</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>mpck [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}mpck.exe -V</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>mpck [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}mpck -V</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>mpck [\.0-9]+</regexp>
                </parser>
            </operatingSystem>
        </versionDetection>
        <execution name="mp3">
            <operatingSystem name="LINUX">
                <command>${UTIL_PATH}mpck ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="WINDOWS">
                <command>${UTIL_PATH}mpck.exe ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
            <operatingSystem name="MAC">
                <command>${UTIL_PATH}mpck ${TARGET_FILE}</command>
                <parser>
                    <stream>STDOUT</stream>
                    <regexp>(?s).*</regexp>
                </parser>
            </operatingSystem>
        </execution>
    </util>


</externalUtils>